/* region query */
@mixin withRegion($specificRegion) {
  &:lang(#{$specificRegion}) {
    @content;
  }
}

/* media query */
@mixin queryMaxWidth($width) {
  @media only screen and (max-width: #{$width}px) {
    @content;
  }
}

@mixin queryMinWidth($width) {
  @media only screen and (min-width: #{$width}px) {
    @content;
  }
}
@mixin queryLandScape() {
  @media only screen and (orientation: landscape) {
    @content;
  }
}

@mixin setHTML {
  font-size: 100px;
  @media only screen and (max-width: #{$queryLG}px) {
    font-size: calc(100vw / #{$queryLG} * 100);
  }
  @media only screen and (max-width: #{$querySM}px) and (orientation: portrait) {
    font-size: calc(100vw / #{$querySM} * 100);
  }
  @media only screen and (max-width: 500px) and (orientation: portrait) {
    font-size: 100px;
  }
}

@mixin tablet() {
  @media only screen and (max-width: #{$querySM}px) and (orientation: portrait) {
    @content;
  }
}
@mixin mobile() {
  @media only screen and (max-width: 500px) and (orientation: portrait) {
    @content;
  }
}

@mixin bgContainer() {
  height: fit-content;
  background-position: top;
  background-size: cover;
  @include flexCenter(column);
  padding-top: 0.4rem;
}

@mixin position($pos, $top: null, $right: null, $bottom: null, $left: null, $z-index: null) {
  position: $pos;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  z-index: $z-index;
}

@mixin sizeWH($width: null, $height: null, $display: null, $pos: null) {
  width: $width;
  height: $height;
  display: $display;
  position: $pos;
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin inlineBlockWH($width: null, $height: null) {
  display: inline-block;
  width: $width;
  height: $height;
}

@mixin textMixin(
  $color: null,
  $size: null,
  $weight: null,
  $transform: null,
  $decoration: null,
  $align: null,
  $style: null
) {
  color: $color;
  font-size: $size;
  font-weight: $weight;
  font-style: $style;
  text-transform: $transform;
  text-decoration: $decoration;
  text-align: $align;
}

/* ellipsis */
@mixin ellipsis($e: n) {
  overflow: hidden;
  white-space: nowrap;
  @if $e == e {
    text-overflow: ellipsis;
  }
}

@mixin ellipsis-line($line) {
  overflow: hidden;
  text-overflow: ellipsis;
  word-break: break-word;
  display: -webkit-box;
  -webkit-line-clamp: $line;
  -webkit-box-orient: vertical;
}

/* fullscreen background */
@mixin fullscreenBg($url) {
  background: url('#{$url}') center / 100% auto no-repeat;
  width: 100%;
  height: 100%;
}

/* full size */
@mixin fullsize() {
  width: 100%;
  height: 100%;
}

/* full cover */
@mixin fullcover() {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

/* clear float */
@mixin clear() {
  &:after {
    content: '';
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}

/* CDN settings */
@function assetsUrl($path, $region) {
  @return url('#{$cdn}/#{$region}/#{$path}');
}

/* align center */
@mixin alignCenter($left: 0, $right: 0) {
  margin: auto;
  left: $left;
  right: $right;
}

@mixin autoCenter($top: 0, $right: 0, $bottom: 0, $left: 0) {
  margin: auto;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin flexCenter($direction: null) {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: $direction;
}

@mixin bgCenter($size: 100% auto) {
  background-position: center center;
  background-repeat: no-repeat;
  background-size: $size;
}

/* setup fullscreen */
@mixin fullscreenSetup {
  position: fixed; // have to fixed in innerHeight & innerWidth
  /* force landscape */
  @media only screen and (orientation: portrait) {
    transform: rotate(90deg);
    transform-origin: 50vmin 50vmin;
  }
}

/* Disable highlight/copy/scale/selection in UIWebView */
@mixin disableDefaultAction() {
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
  touch-action: pan-x pan-y;
  user-select: none;
  input,
  textarea,
  select {
    user-select: auto;
  }
  input::-webkit-contacts-auto-fill-button {
    position: absolute;
    opacity: 0;
  }
}

/* z-index */
@mixin zIndex($key) {
  z-index: map-get($z-index-map, $key);
}

@mixin textGradient($values...) {
  background-image: linear-gradient($values);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

@mixin cursorHover() {
  @include landscapeLG() {
    &:hover {
      cursor: pointer;
    }
  }
}

@mixin fontSizeWithHeight($size) {
  font-size: $size;
  line-height: $size;
}

@mixin fadeTransition($name, $time) {
  .#{$name}-enter-active,
  .#{$name}-leave-active {
    transition: opacity $time ease;
  }

  .#{$name}-enter-from,
  .#{$name}-leave-to {
    opacity: 0;
  }
}

@mixin customScrollBar($thumb: $scrollbar-thumb, $track: $scrollbar-track) {
  /* Customize Scrollbar */

  &::-webkit-scrollbar {
    width: 0.05rem;
  }

  &::-webkit-scrollbar-thumb {
    background: $thumb;
  }

  &::-webkit-scrollbar-track {
    background: $track;
    background-clip: padding-box;
  }
}

@mixin fixedCenter($width, $height: $width) {
  position: absolute;
  @include size($width, $height);
  left: 50%;
  top: 50%;
}

@mixin withContainer() {
  max-width: 14.4rem;
  margin: 0 auto;
}
